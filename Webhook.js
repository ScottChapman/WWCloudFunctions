/*
 * This is a Webhook End-point for Watson Workspace. You will need to modify the credentials below
 * to contain the actual credentials for your Watson Workspace App.
 *
 * This action will perform all the necesary validation and hand-shaking to Watson Work Services.
 * Actual events will be published on the EventTrigger trigger
 * The following package parameters are used:
 * WWAppId - The Watson Workspace appId
 * WWAppSecret - The Watson Workspace App AppSecret
 * WWWebhookSecret - The Watson Workspace Webhook Secret
 * WWEventTopic - The name of the topic to send events to
 */

var crypto = require("crypto");
var openwhisk = require("openwhisk");
var util = require("util");
var _ = require("lodash");
var mustache = require("mustache");
var annotationGQL = {
	GraphQLExpansion: `
   query {
     message(id: "{{messageId}}") {
       content
       id
       created
       createdBy {
         displayName
         id
         emailAddresses
         photoUrl
       }
     }
   }`
};

var expansion = {
	"message-annotation-added": annotationGQL,
	"message-annotation-edited": annotationGQL,
	"message-annotation-removed": annotationGQL,
};

function expandEvent(body, params, ow) {
	return new Promise((resolve, reject) => {
		// Check to see if there is an expansion GraphQL expression to run
		if (body.hasOwnProperty("type") && expansion.hasOwnProperty(body.type)) {
			var exp = expansion[body.type];
			ow.actions.invoke({
				name: "WatsonWorkspace/GraphQL",
				blocking: true,
				params: {
					string: mustache.render(exp.GraphQLExpansion, body)
				}
			}).then(resp => {
				// If annotation, mark it as generated by my app if it was
				if (body.type.startsWith("message-annotation"))
					body.ownEvent = resp.response.result.data.message.createdBy.id === params.AppId;

				var data = body;
				if (exp.hasOwnProperty("asProperty")) {
					data[exp.asProperty] = resp.response.result.data;
				} else {
					data = _.merge(data, resp.response.result.data);
				}
				resolve(data);
			}).catch(err => {
				reject(err);
			});
		} else {
			resolve(body);
		}
	});
}

function cleanUpEvent(event, params) {
	// expand annotationPayload into JSON obejct if it exists.
	if (event.hasOwnProperty("annotationPayload") && typeof event.annotationPayload === "string")
		event.annotationPayload = JSON.parse(event.annotationPayload);

	// Was this event generated by my app?
	if (_.get(event,"annotationPayload.targetAppId"))
		event.ownEvent = event.annotationPayload.targetAppId === params.AppId;
	else
		event.ownEvent = event.userId === params.AppId;

	// Cleanup time field
	if (event.hasOwnProperty("time"))
		event.time = Date(event.time).toString();
}

function closeAction(annotation, params, ow) {
	var card = {
	  type: 'INFORMATION',
	  title: 'Action Completed',
	  text: "You can close this action.",
	  buttons: []
	};
	if (_.has(annotation,"annotationPayload.actionId.response")) {
		_.merge(card, annotation.annotationPayload.actionId.response);
	}
	ow.actions.invoke ({
		name: "WatsonWorkspace/TargetedMessage",
		blocking: true,
		params: {cards: card, annotation: annotation}
	}).then(resp => {
		ow.actions.invoke ({
			name: "WatsonWorkspace/GraphQL",
			blocking: true,
			params: resp.response.result
		}).then(resp => {
		})
	}).catch(err => {
		console.dir(err);
	})

}

function main(params) {
	return new Promise((resolve, reject) => {
		console.log(JSON.stringify(params,null,2));
		var ow = openwhisk(
		    _.get(params,"WatsonWorkspace.OWArgs",{})
		/*
			{
        apihost: "openwhisk.ng.bluemix.net",
        api_key: "0a8d7e29-8e5a-4656-8bd6-34bca738449a:m4Wgedl2znzbFiSP6AJr2PTFDZHbueCIUdw6K6KsVzatulkZgiEC5DHDkbJ1nNpG"
      }
        */
		);
		var req = {
			rawBody: Buffer.from(params.__ow_body, "base64").toString(),
			body: JSON.parse(Buffer.from(params.__ow_body, "base64").toString()),
			headers: params.__ow_headers
		};
		if (!validateSender(params, req)) {
			reject({
				statusCode: 401,
				body: "Invalid Request Signature"
			});
		}
		if (_.get(req.body, "type") === "verification") {
			var body = {
				response: req.body.challenge
			};
			var strBody = JSON.stringify(body);
			var validationToken = crypto.createHmac("sha256", params.WatsonWorkspace.WebhookSecret).update(strBody).digest("hex");
			resolve({
				statusCode: 200,
				headers: {
					"Content-Type": "text/plain; charset=utf-8",
					"X-OUTBOUND-TOKEN": validationToken
				},
				body: strBody
			});
		} else {

			// Clean up the event
			cleanUpEvent(req.body,params.WatsonWorkspace);

			if (_.get(req.body, "annotationType") === "actionSelected" && req.body.ownEvent) {
				var triggerName = "ActionSelected";
                var prefix = "BUTTON_SELECTED: ";
				if (req.body.annotationPayload.actionId.startsWith(prefix)) {
					triggerName = "ButtonSelected";
					var action = req.body.annotationPayload.actionId.substr(prefix.length)
					try {
						req.body.annotationPayload.actionId = JSON.parse(action);
					}
					catch (err) {
						req.body.annotationPayload.actionId = action;
					}
					closeAction(req.body, params.WatsonWorkspace,ow);
				}
				// Send event to topic
				ow.triggers.invoke({
					name: triggerName,
					params: req.body
				}).then(result => {
					resolve({
						statusCode: 200,
						headers: {
							"Content-Type": "application/json"
						},
						body: {
							status: "OK!"
						}
					});
				}).catch(err => {
					reject({
						statusCode: 401,
						message: "Error firing trigger",
						error: err
					});
				});
			}
			else {
				// Expand Event
				expandEvent(req.body, params.WatsonWorkspace, ow).then(body => {

					// Send event to topic
					ow.triggers.invoke({
						name: body.appEvent ? "WWApplicationEvents" : "WWWebhookEvents",
						params: body
					}).then(result => {
						resolve({
							statusCode: 200,
							headers: {
								"Content-Type": "application/json"
							},
							body: {
								status: "OK!"
							}
						});
					}).catch(err => {
						reject({
							statusCode: 401,
							message: "Error firing trigger",
							error: err
						});
					});
				}).catch(err => {
					reject({
						statusCode: 401,
						message: "Error expanding event",
	          error: err
					});
				});
			}
		}
	});
}


function validateSender(params, req) {
	var ob_token = req.headers["x-outbound-token"];
	var calculated = crypto.createHmac("sha256", params.WatsonWorkspace.WebhookSecret).update(req.rawBody).digest("hex");
	return ob_token == calculated;
}


var message =
{
  "WatsonWorkspace": {
    "AppId": "e798f199-42f2-4323-b96f-63467945e0db",
    "AppSecret": "yE9XgOFjiGPLOSBeiGLN0lnUN-No",
    "WebhookSecret": "9qzzzci3nwws96ta4ev4rybap2y7s9hc",
		"OWArgs": {
			"ignore_certs": true,
			"apihost": "openwhisk.ng.bluemix.net",
			"api_key": "0a8d7e29-8e5a-4656-8bd6-34bca738449a:m4Wgedl2znzbFiSP6AJr2PTFDZHbueCIUdw6K6KsVzatulkZgiEC5DHDkbJ1nNpG"
		}
  },
  "__ow_headers": {
    "x-outbound-token": "c2f5bcadffad4dd88318384ac8ecc81fd3f46d051bf8164032c280ee86195539"
  },
  "data": {
    "annotationPayload": "{\"language\":\"en\",\"taxonomy\":[{\"confident\":false,\"label\":\"/shopping/toys/action figures\",\"score\":0.714851},{\"confident\":false,\"label\":\"/art and entertainment/theatre/theatre awards\",\"score\":0.364781},{\"confident\":false,\"label\":\"/sports/boxing\",\"score\":0.168129}]}",
    "spaceName": "ScottSpace",
    "contentType": "text/markdown",
    "messageId": "5a95abd1e4b01e6e9ce0cee1",
    "content": "do you know Joe Smith?",
    "time": 1519758289517,
    "userId": "toscana-aip-nlc-consumer-client-id",
    "type": "message-annotation-added",
    "spaceId": "58822220e4b0192475567c93",
    "userName": "Scott Chapman",
    "annotationType": "message-nlp-taxonomy"
  },
  "__ow_body": "eyJhbm5vdGF0aW9uUGF5bG9hZCI6IntcImxhbmd1YWdlXCI6XCJlblwiLFwidGF4b25vbXlcIjpbe1wiY29uZmlkZW50XCI6ZmFsc2UsXCJsYWJlbFwiOlwiL3Nob3BwaW5nL3RveXMvYWN0aW9uIGZpZ3VyZXNcIixcInNjb3JlXCI6MC43MTQ4NTF9LHtcImNvbmZpZGVudFwiOmZhbHNlLFwibGFiZWxcIjpcIi9hcnQgYW5kIGVudGVydGFpbm1lbnQvdGhlYXRyZS90aGVhdHJlIGF3YXJkc1wiLFwic2NvcmVcIjowLjM2NDc4MX0se1wiY29uZmlkZW50XCI6ZmFsc2UsXCJsYWJlbFwiOlwiL3Nwb3J0cy9ib3hpbmdcIixcInNjb3JlXCI6MC4xNjgxMjl9XX0iLCJzcGFjZU5hbWUiOiJTY290dFNwYWNlIiwiY29udGVudFR5cGUiOiJ0ZXh0L21hcmtkb3duIiwibWVzc2FnZUlkIjoiNWE5NWFiZDFlNGIwMWU2ZTljZTBjZWUxIiwiY29udGVudCI6ImRvIHlvdSBrbm93IEpvZSBTbWl0aD8iLCJ0aW1lIjoxNTE5NzU4Mjg5NTE3LCJ1c2VySWQiOiJ0b3NjYW5hLWFpcC1ubGMtY29uc3VtZXItY2xpZW50LWlkIiwidHlwZSI6Im1lc3NhZ2UtYW5ub3RhdGlvbi1hZGRlZCIsInNwYWNlSWQiOiI1ODgyMjIyMGU0YjAxOTI0NzU1NjdjOTMiLCJ1c2VyTmFtZSI6IlNjb3R0IENoYXBtYW4iLCJhbm5vdGF0aW9uVHlwZSI6Im1lc3NhZ2UtbmxwLXRheG9ub215In0="
}

main(message).then(resp => {
	console.dir(resp);
}).catch(err => {
	console.dir(err);
})
